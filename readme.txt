Программа решает задачу нахождения собственных значений матрицы методом QR-разложения вращений

Программа находит собственные значения матрицы методов вращений. Исходная матрица A сначала приводится к почти-тругольному
виду, а затем к уже полученной почти-треугольной матрице применяется метод вращений для нахождения собственных значений.

===============================================================================

Алгоритм:

Пусть матрица A уже была приведена к почти-тругольному виду.

Алгоритм #1:

1. Положим A_1=A
2. Для всех k=1,2... матрица A_(k+1) получается из матрицы Ak
    1. Опрелим требуемый сдвиг s_k = a_n_n (если s_k=0, тогда сдвинем s_k на 0.1)
    2. Построит QR-разложение матрицы A_k - s_k * I
    3. Вычислим матрицу A_k+1=R_k * Q_k + s_k*I

Пусть требуется найти собственные значения матрицы с точностью epsilon

Алгоритм исчерпывания матрицы:
1. Положим M_m=A
2. Будем применять Алгоритм #1 к каждой подматрице M_k, k=m...2
    1. Если |a_m_(m-1)| < epsilon*|A_1|, то следующее собственное значение матрицы есть a_m_m
    2. Переход к матрице M_(k-1), пока k > 2


===============================================================================

Коды ошибок:

0 - работа завершена успешно, решение построено
1 - работа завершена успешно, решения системы не существует
100 - ошибка при открытии/закрытии файла
101 - ошибка при чтении входных данных из файла
102 - ошибка при записи выходных данных в файл
200 - ошибка последовательности задания аргументов (флаги могут заданы только после позиционных аргументов, если они есть)
201 - слишком много позиционных аргументов
202 - был задан неизвестный флаг

===============================================================================

МОДУЛЬ evc_26_10

-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-

static
void PrintMatrix(int n, int m, double *A)
Функция печатает подматрицу размером mxm матрицы A nxn на экран.

-------------------------------------------------------------------------------

int evc_26_10(int n, int maxIter, double epsilon, double *A, double *E, double *tmp, double precision)
Находит собственные значения матрицы A и помещает их в E. Возвращает 0 при успешном исполнении, иначе 1.

n - размер матрицы A
maxIter - максимально число итераций
epsilon - точность
A - исходная матрица
E - собственные значения
tmp - вспомогательный массив данных
precision - машинный ноль

-------------------------------------------------------------------------------

int evc_memsize_26_10(int n)

Возвращает размер для необходимый для вспомогательного массива данных

-------------------------------------------------------------------------------

МОДУЛЬ sim_26_10

-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-

static
void PrintMatrix(int size, double *A)

Функция печатает матрицу A размер sizexsize на экран.

-------------------------------------------------------------------------------

int sim_26_10(int n, double *A, double *tmp, double precision)

Приводит матрицу A к почти-треугольному виду.

n - размер матрицы A
A - исходная матрица
tmp - вспомогательный массив данных
precision - машинный ноль

-------------------------------------------------------------------------------

int sim_memsize_26_10(int n)

Возвращает размер для необходимый для вспомогательного массива данных

-------------------------------------------------------------------------------

МОДУЛЬ main_26_10

-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-

int ReadInput(const char *input, double **A, int *size)
Функция считывает входные данные A, size.
В случае ошибки возвращает коды ошибок 100-101, иначе 0.

-------------------------------------------------------------------------------

int ReadMatrix(FILE *in, double **A, int size)
Функция считывает матрицу длины (size)x(size) из файла in и записывает в A.
В случае ошибки при считывании матрицы возвращает код ошибки 101, иначе 0.

-------------------------------------------------------------------------------

int WriteOutput(const char *output, int size, double *E)
Функция записывает в файл output вектор собственных значений E размера size.
В случае ошибки при открытии/записи вектора решений возвращает код ошибки 100/102, иначе 0.

-------------------------------------------------------------------------------

static
void PrintMatrix(double *A, int size)
Функция печатает матрицу A размер sizexsize на экран.

-------------------------------------------------------------------------------

void PrintHelpMessage()
Функция распечатывает на экран сообщение - иструкцию по использованию программой

-------------------------------------------------------------------------------

int ReadCommandLineArguments(
        int count,
        char *arguments[],
        int *isHelpFlagSet,
        int *isShowMatrixFlagSet,
        int *isTraceFlagSet,
        int *maxIter,
        double *eps,
        double *precision,
        char **input,
        char **output
)
Функция обрабатывает аргументы заданые в arguments и выставляет соответствующие
флажки программы.

В случае, если был задан неизвестный флаг, функция возвращает ошибку 202,
если был нарушен порядок задания аргументов - 200, если был передано более, чем
2 позиционных аргумента - 201; иначе 0.
